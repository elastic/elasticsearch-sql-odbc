[role="xpack"]
[testenv="platinum"]
[[sql-odbc]]
== SQL ODBC

{es}'s SQL ODBC driver is a rich, fully featured ODBC driver for {es}.
It is a core level driver, exposing all the functionality accessible through ODBC API that {es}'s SQL implementation offers, converting
ODBC calls to {es-sql}.

[[sql-odbc-installation]]
[float]
=== Installation

The ODBC driver can be obtained from:

Dedicated page::
https://www.elastic.co/downloads/odbc-client[elastic.co] provides the links for the manual downloads.

==== Prerequisites
[[sql-odbc-prerequisites]]
[Note]
===================
The {es} ODBC driver is currently available on *Windows 10 64bit* platform only, although it could work on older supported Windows 64bit
releases as well.

The driver requires _Microsoft Visual C++ Redistributable for Visual Studio 2017_ software package *pre-installed*.
===================


TODO: installer walk-through.


[[odbc-setup]]
[float]
=== Configuration

Once the driver has been installed, in order for an application to be able to connect to {es} through ODBC, a set of configuration
parameters must be provided to the driver. Depending on the application, there are generally three ways of providing this parameters set:

* through a connection string;
* using a User or a System DSN;
* through a File DSN.

_DSN_ stands for _data source name_ and is a generic name given to the set of parameters an ODBC driver needs to connect to its data base.
From here on this set of parameters will be colloquially called _connection parameters_ (despite some of these parameters configuring some
other aspects of a driver's functions, like logging, buffer sizes etc.), or simply _DSN_.

Configuration through a DSN is the most widely used, simplest and safest way of performing the driver configuration. Constructing a
connection string on the other hand is the most spartan way and consequently the least common one as well. For the reminder of these
section we will focus on DSN usage only.

==== 1. Launching ODBC Data Source Administrator
For DSN management, ODBC provides the _ODBC Data Source Administrator_ application, readily installed on all recent desktop Windows OSes.
To launch it, open the search menu - _Win + S_ - and type "ODBC Data Sources (64-bit)", _Enter_:

[[launch_administrator]]
.Launching ODBC Data Source Administrator
image:images/launch_administrator.png[]

Once launched, one can verify that the driver installed correctly by clicking on the _Drivers_ tab of the Administrator and checking that
_Elasticsearch Driver_ is present in the list of installed drivers:

[[administrator_drivers]]
.Drivers tab
image:images/administrator_drivers.png[]

==== 2. Configure a DSN
The next step is to configure a DSN. One can choose between the following options mapped on the first three tabs of the Administrator
application:

* User DSN
+
The connections configured under this tab are only available to the currently logged in user. Each of these DSNs are referred to by a
chosen arbitrary name (typically a host or cluster name).
+
The actual set of parameters making up the DSN is stored through the driver in system's Registry. Thus, a user will later only need to
provide an application with the DSN name in order to connect to the configured {es} instance.
* System DSN
+
Similar to a User DSN, except that the connections configured under this tab will be available to all the users configured on the system.
* File DSN
+
This tab contains functionality that will allow to have one set of connection parameters written into a file, rather then the Registry.
+
Such a file can be then shared among multiple systems and the user will need to specify the path to it, in order to have the application
connect to the configured {es} instance.

The configuration steps are similar for all the above points. Following is an example of configuring a System DSN.

===== 2.1 Launch {es} ODBC DSN Editor
Click on the _System DSN_ tab, then on the _Add..._ button:

[[system_add]]
.Add a new DSN
image:images/administrator_system_add.png[]

A new window will open, listing all available installed drivers. Click on _{es} Driver_, to highlight it, then on the _Finish_ button:

[[launch_editor]]
.Launch the DSN Editor
image:images/administrator_launch_editor.png[]

This action closes the previously opened second window and open a new one instead, {es} ODBC driver's DSN Editor:

[[dsn_editor]]
.{es} ODBC DSN Editor
image:images/dsn_editor.png[]

This new window has three tabs, each responsible for a set of configuration parameters, as follows.

===== 2.2 Connection parameters
This tab allows configuration for the following items:

* Name
+
This is the name the DSN will be referred by.
+
NOTE: The characters available for this field are limited to the set permitted for a Registry key.
+
Example: _localhost_
* Description
+
This field allows a user arbitrary text; generally used for short notes about the configured connection.
+
Example: _Clear-text connection to the local [::1]:9200._
* Hostname
+
This field requires an IP address or a resolvable DNS name of the {es} instance that the driver will connect to.
+
Example: _::1_
* Port
+
The port on which the {es} listens on.
+
NOTE: If left empty, the default *9200* port number will be used.
* Username, Password
+
If security is enabled, these fields will need to contain the credentials of the user configured to access the REST SQL endpoint.


NOTE: At a minimum, the _Name_ and _Hostname_ fields must be provisioned, before the DSN can be saved.

WARNING: Connection encryption is enabled by default. This needs to be changed if connecting to an instance with no cryptography enabled
on the SQL API.

===== 2.3 Cryptography parameters
===== 2.4 Logging parameters
===== 2.5 Testing the connection

==== 3. DSN is available
