// [role="xpack"]
[testenv="platinum"]
[[sql-odbc]]
:product: Elasticsearch SQL ODBC Driver
= {product}

WARNING: This functionality is in prerelease and is subject to change. The design and code is less mature than official GA features and is being provided as-is with no warranties. Prerelease features are not subject to the support SLA of official GA features.

{product} is a rich, fully featured ODBC driver for {es}. It is a core level driver, exposing all of the functionality accessible through the {es}'s SQL ODBC API, converting ODBC calls into {es-sql}.

The {product} can be installed on Windows using the MSI package. The installation process is simple and is composed of standard MSI wizard steps.

[[prerequisites]]
== Installation Prerequisites

Before you install the {product} you need to meet the following prerequisites;

* Windows 10 64 bit _or_ Windows Server 2016 64 bit operating system
* .NET Framework 4.0 full - https://www.microsoft.com/en-au/download/details.aspx?id=17718
* Microsoft Visual C++ Redistributable for Visual Studio 2017 - https://support.microsoft.com/en-au/help/2977003/the-latest-supported-visual-c-downloads
* Elevated privileges (administrator) for the User performing the installation

If you fail to meet any of the prerequisites the installer will show an error message and abort the installation.

NOTE: It is not possible to inline upgrade using the MSI. In order to upgrade, you will first have to uninstall the old driver and then reinstall the new driver.

[[download]]
== Download the `.msi` package

Download the `.msi` package for {product} {version} from:
https://www.elastic.co/downloads/odbc-client

[[installation-gui]]
== Installation using the graphical user interface (GUI)

Double-click the downloaded `.msi` package to launch a GUI wizard that will guide you through the installation process.

You will first be presented with a welcome screen:

image::images/installer_started.png[Installer Welcome Screen]

Clicking  *Next* will present the End User License Agreement. You will need to accept the license agreement in order to continue the installation.

image::images/installer_accept_license.png[Installer EULA Screen]

The following screen allows you to customise the installation path for the Elasticsearch ODBC driver files.

NOTE: The default installation path is of the format: *%ProgramFiles%\Elastic\ODBCDriver{backslash}{version}*

image::images/installer_choose_destination.png[Installer Driver Path]

You are now ready to install the driver.

NOTE: You will require elevated privileges (administrator) for installation.

image::images/installer_ready_install.png[Installer Begin]

Assuming the installation takes place without error you should see progress screen, followed by the completed screen:

image::images/installer_installing.png[Installer Installing]
image::images/installer_finish.png[Installer Complete]

As with any MSI installation package, a log file for the installation process can be found within the `%TEMP%` directory, with a randomly generated name adhering to the format `MSI<random>.LOG`. 

If you encounter an error during installation we would encourage you to open an issue [ISSUE LINK HERE], attach your installation log file and provide details so we can investigate.

[[installation-cmd]]
== Installation using the command line

The `.msi` can also be installed via the command line. The simplest installation using the same defaults as the GUI is achieved by first navigating to the download directory, then running:

["source","sh",subs="attributes,callouts"]
--------------------------------------------
msiexec.exe /i esodbc-{version}-windows-x86_64.msi /qn
--------------------------------------------

By default, `msiexec.exe` does not wait for the installation process to complete, since it runs in the Windows subsystem. To wait on the process to finish and ensure that `%ERRORLEVEL%` is set accordingly, it is recommended to use `start /wait` to create a process and wait for it to exit:

["source","sh",subs="attributes,callouts"]
--------------------------------------------
start /wait msiexec.exe /i esodbc-{version}-windows-x86_64.msi /qn
--------------------------------------------

As with any MSI installation package, a log file for the installation process can be found within the `%TEMP%` directory, with a randomly generated name adhering to the format `MSI<random>.LOG`. The path to a log file can be supplied using the `/l` command line argument

["source","sh",subs="attributes,callouts"]
--------------------------------------------
start /wait msiexec.exe /i esodbc-{version}-windows-x86_64.msi /qn /l install.log
--------------------------------------------

Supported Windows Installer command line arguments can be viewed using:

["source","sh",subs="attributes,callouts"]
--------------------------------------------
msiexec.exe /help
--------------------------------------------

...or by consulting the https://msdn.microsoft.com/en-us/library/windows/desktop/aa367988(v=vs.85).aspx[Windows Installer SDK Command-Line Options].

[[msi-command-line-options]]
==== Command line options

All settings exposed within the GUI are also available as command line arguments (referred to as _properties_ within Windows Installer documentation) that can be passed to `msiexec.exe`:

[horizontal]
`INSTALLDIR`::

  The installation directory.
  Defaults to ++%ProgramFiles%\Elastic\ODBCDriver{backslash}{version}++.

To pass a value, simply append the property name and value using the format `<PROPERTYNAME>="<VALUE>"` to
the installation command. For example, to use a different installation directory to the default one:

["source","sh",subs="attributes,callouts"]
--------------------------------------------
start /wait msiexec.exe /i esodbc-{version}-windows-x86_64.msi /qn INSTALLDIR="c:\CustomDirectory"
--------------------------------------------

Consult the https://msdn.microsoft.com/en-us/library/windows/desktop/aa367988(v=vs.85).aspx[Windows Installer SDK Command-Line Options]
for additional rules related to values containing quotation marks.

[[uninstall-msi-gui]]
==== Uninstall using Add/Remove Programs

The `.msi` package handles uninstallation of all directories and files added as part of installation.

WARNING: Uninstallation will remove **all** contents created as part of installation.

An installed program can be uninstalled by pressing the Windows key and typing `add or remove programs` to open the system settings.

Once opened, find the Elasticsearch ODBC Driver installation within the list of installed applications, click and choose `Uninstall`:

[[msi-installer-uninstall]]
image::images/uninstall.png[]

[[uninstall-msi-command-line]]
==== Uninstall using the command line

Uninstallation can also be performed from the command line by navigating to the directory
containing the `.msi` package and running:

["source","sh",subs="attributes,callouts"]
--------------------------------------------
start /wait msiexec.exe /x esodbc-{version}-windows-x86_64.msi /qn
--------------------------------------------

Similar to the install process, a path for a log file for the uninstallation process can be passed using the `/l` command line argument

["source","sh",subs="attributes,callouts"]
--------------------------------------------
start /wait msiexec.exe /x esodbc-{version}-windows-x86_64.msi /qn /l uninstall.log
--------------------------------------------

[[odbc-setup]]
[float]
=== Configuration

Once the driver has been installed, in order for an application to be able to connect to {es} through ODBC, a set of configuration parameters must be provided to the driver. Depending on the application, there are generally three ways of providing these parameters:

* through a connection string;
* using a User or a System DSN;
* through a File DSN.

DSN (_data source name_) is a generic name given to the set of parameters an ODBC driver needs to connect to a database.

We will refer to these parameters as _connection parameters or DSN_ (despite some of these parameters configuring some other aspects of a driver's functions; e.g. logging, buffer sizes...).

Using a DSN is the most widely used, simplest and safest way of performing the driver configuration. Constructing a connection string, on the other hand, is the most spartan way and consequently the least common method.

We will focus on DSN usage only.

==== 1. Launching ODBC Data Source Administrator

For DSN management, ODBC provides the _ODBC Data Source Administrator_ application, readily installed on all recent desktop Windows OSes.

To launch it, open the search menu - _Win + S_ - and type "ODBC Data Sources (64-bit)" an press _Enter_:

[[launch_administrator]]
.Launching ODBC Data Source Administrator
image:images/launch_administrator.png[]

Once launched, you can verify that the driver was installed correctly by clicking on the _Drivers_ tab of the Administrator and checking that _Elasticsearch Driver_ is present in the list of installed drivers.

You should also see the version number of the installed driver.

[[administrator_drivers]]
.Drivers tab
image:images/administrator_drivers.png[]

==== 2. Configure a DSN
The next step is to configure a DSN. You can choose between the following options mapped on the first three tabs of the Administrator
application:

* User DSN
+
The connections configured under this tab are only available to the currently logged in user. Each of these DSNs are referred to by a chosen arbitrary name (typically a host or cluster name).
+
The actual set of parameters making up the DSN is stored through the driver in system's Registry. Thus, a user will later only need to provide an application with the DSN name in order to connect to the configured {es} instance.
* System DSN
+
Similar to a User DSN, except that the connections configured under this tab will be available to all the users configured on the system.
* File DSN
+
This tab contains functionality that will allow to have one set of connection parameters written into a file, rather then the Registry.
+
Such a file can be then shared among multiple systems and the user will need to specify the path to it, in order to have the application connect to the configured {es} instance.

The configuration steps are similar for all the above points. Following is an example of configuring a System DSN.

===== 2.1 Launch {es} ODBC DSN Editor
Click on the _System DSN_ tab, then on the _Add..._ button:

[[system_add]]
.Add a new DSN
image:images/administrator_system_add.png[]

A new window will open, listing all available installed drivers. Click on _{es} Driver_, to highlight it, then on the _Finish_ button:

[[launch_editor]]
.Launch the DSN Editor
image:images/administrator_launch_editor.png[]

This action closes the previously opened second window and open a new one instead, {es} ODBC driver's DSN Editor:

[[dsn_editor]]
.{es} ODBC DSN Editor
image:images/dsn_editor_basic.png[]

This new window has three tabs, each responsible for a set of configuration parameters, as follows.

===== 2.2 Connection parameters
This tab allows configuration for the following items:

* Name
+
This is the name the DSN will be referred by.
+
NOTE: The characters available for this field are limited to the set permitted for a Registry key.
+
Example: _localhost_
* Description
+
This field allows a arbitrary text; generally used for short notes about the configured connection.
+
Example: _Clear-text connection to the local [::1]:9200._
* Hostname
+
This field requires an IP address or a resolvable DNS name of the {es} instance that the driver will connect to.
+
Example: _::1_
* Port
+
The port on which the {es} listens on.
+
NOTE: If left empty, the default *9200* port number will be used.
* Username, Password
+
If security is enabled, these fields will need to contain the credentials of the user configured to access the REST SQL endpoint.

NOTE: At a minimum, the _Name_ and _Hostname_ fields must be provisioned, before the DSN can be saved.

WARNING: Connection encryption is enabled by default. This will need to be changed if connecting to a SQL API endpoint with no cryptography enabled.

===== 2.3 Cryptography parameters
One of the following SSL options can be chosen:

* Disabled. All communications unencrypted.
+
The communication between the driver and the {es} instance is performed over a clear-text connection.
+
WARNING: This setting can expose the access credentials to a 3rd party intercepting the network traffic and is not recommended.
* Enabled. Certificate not validated.
+
The connection encryption is enabled, but the certificate of the server is not validated.
+
NOTE: This is currently the default setting.
+
WARNING: This setting allows a 3rd party to act with ease as a man-in-the-middle and thus intercept all communications.
* Enabled. Certificate is validated; hostname not validated.
+
The connection encryption is enabled and the driver verifies that server's certificate is valid, but it does *not* verify if the certificate is running on the server it was meant for.
+
WARNING: This setting allows a 3rd party that had access to server's certificate to act as a man-in-the-middle and thus intercept all the communications.
* Enabled. Certificate is validated; hostname validated.
+
The connection encryption is enabled and the driver verifies that both the certificate is valid, as well as that it is being deployed on the server that the certificate was meant for.
* Enabled. Certificate identity chain validated.
+
This setting is equivalent to the previous one, with one additional check against certificate's revocation. This offers the strongest security option and is the recommended setting for production deployments.
* Certificate File
+
In case the server uses a certificate that is not part of the PKI, for example usaing a self-signed certificate, you can configure the path to a X.509 certificate file that will be used by the driver to validate server's offered certificate.

NOTE: The driver will only read the contents of the file just before a connection is attempted. See <<connection_testing>> section further on how to check the validity of the provided parameters.

NOTE: If using the file browser to locate the certificate - by pressing the _Browse..._ button - only files with _.pem_ and _.der_ extensions will be considered by default. Choose _All Files (\*.*)_ from the drop down, if your file ends with a different extension:

[[dsn_editor_cert]]
.Certificate file browser
image:images/dsn_editor_security_cert.png[]

===== 2.4 Logging parameters
For troubleshooting purposes, the {product} offers functionality to log the API calls that an application makes; this is enabled in the Administrator application:

[[administrator_tracing]]
.Enable Application ODBC API logging
image:images/administrator_tracing.png[]

However, this only logs the ODBC API calls made by the application into the _Driver Manager_ and not those made by the _Driver Manager_ into the driver itself. To enable logging of the calls that the driver receives, as well as internal driver processing events, you can enable driver's logging on Editor's _Logging_ tab:

* Enable Logging?
+
Ticking this will enable driver's logging. A logging directory is also mandatory when this option is enabled (see the next option).
However the specified logging directory will be saved in the DSN if provided, even if logging is disabled.
* Log Directory
+
Here is to specify which directory to write the log files in.
+
NOTE: The driver will create *one log file per connection*, for those connections that generate logging messages.
* Log Level
+
Configure the verbosity of the logs.

[[administrator_logging]]
.Enable driver logging
image:images/dsn_editor_logging.png[]

NOTE: When authentication is enabled, the password will be redacted from the logs.

WARNING: Debug-logging can quickly lead to the creation of many very large files, besides generating additional processing overhead. Only
enable it if instructed so and preferably only when fetching low volumes of data.

[[connection_testing]]
===== 2.5 Testing the connection
Once the _Hostname_, the _Port_ (if different from implicit default) and the SSL options are configured, you can test if the provided
parameters are correct by pressing the _Test Connection_ button. This will instruct the driver to connect to the {es} instance and perform
a simple SQL test query. (This will thus require a running {es} instance with the SQL plugin enabled.)

[[dsn_editor_conntest]]
.Connection testing
image:images/dsn_editor_conntest.png[]

NOTE: When connection testing, all the configured parameters are taken into account, including the logging configuration. This will allow
early detection of potential file/directory access rights conflicts.

See <<alternative_logging>> section further for an alternative way of configuring the logging.


==== 3. DSN is available
Once everything is in place, pressing the _Save_ button will store the configuration into the chosen destination (Registry or file).

WARNING: Before saving a DSN configuration the provided file/directory paths are verified to be valid on the current system. The DSN editor
will however not verify in any way the validity or reachability of the configured _Hostname_ : _Port_. See <<connection_testing>>
for an exhaustive check.

If everything is correct, the name of the newly created DSN will be listed as available to use:

[[system_added]]
.Connection added
image:images/administrator_system_added.png[]

[[alternative_logging]]
==== Alternative logging configuration

Due to the specification of the ODBC API, the driver will receive the configured DSN parameters - including the logging ones - only once a
connection API is invoked (such as _SQLConnect_ or _SQLDriverConnect_). The _Driver Manager_ will however always make a set of API calls
into the driver before attempting to establish a connection. To capture those calls as well, one needs to pass logging configuration
parameters in an alternative way. The {es} ODBC driver will use an environment variable for this purpose.

Configuring an environment variable is OS specific and not detailed in this guide. Whether the variable should be configured system-wide
or user-specific depends on the way the ODBC-enabled application is being run and if logging should affect the current user only or not.

The definition of the environment variable needs to be done as follows:

* Name: _ESODBC_LOG_DIR_

* Value: [path](?[level]), where:
+
[path] is the path to the directory where the log files will be written into;
+
[level] is optional and can take one of the following values: _debug_, _info_, _warn_, _error_; if not provided, _debug_ is assumed.

[[env_var_logging]]
.Logging environment variable
image:images/env_var_log.png[]

NOTE: When enabling the logging through the environment variable, the driver will create *one log file per process*.

Both ways of configuring the logging can coexist and both can use the same destination logging directory. However, one logging message
will only be logged once, the connection logging taking precedence over the environment variable logging.

